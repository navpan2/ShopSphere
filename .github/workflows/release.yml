# ShopSphere Release Automation (Local-Friendly)
# ===============================================
# Resume-worthy: Semantic versioning, Automated release notes, Docker builds
name: 📦 Release

on:
  push:
    tags:
      - 'v*.*.*'
  
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Is this a pre-release?'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ======================================
  # 🏷️ CREATE RELEASE TAG
  # ======================================
  create-tag:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    outputs:
      tag: ${{ steps.tag.outputs.tag }}
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🏷️ Create and Push Tag
        id: tag
        run: |
          TAG="v${{ github.event.inputs.version }}"
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          
          git config user.name "Release Bot"
          git config user.email "release@shopsphere.local"
          
          git tag -a "$TAG" -m "Release $TAG"
          git push origin "$TAG"
          
          echo "✅ Created tag: $TAG"

  # ======================================
  # 🔢 VERSION MANAGEMENT
  # ======================================
  generate-version:
    runs-on: ubuntu-latest
    needs: [create-tag]
    if: always() && !cancelled()
    outputs:
      version: ${{ steps.version.outputs.version }}
      is-prerelease: ${{ steps.version.outputs.is-prerelease }}
      changelog: ${{ steps.changelog.outputs.changelog }}
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔢 Extract Version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
            IS_PRERELEASE="${{ github.event.inputs.prerelease }}"
          else
            # Extract from git tag
            VERSION=${GITHUB_REF#refs/tags/v}
            # Check if it's a prerelease (contains alpha, beta, rc)
            if [[ "$VERSION" =~ (alpha|beta|rc) ]]; then
              IS_PRERELEASE="true"
            else
              IS_PRERELEASE="false"
            fi
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is-prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          echo "🏷️ Version: $VERSION (Prerelease: $IS_PRERELEASE)"

      - name: 📝 Generate Changelog
        id: changelog
        run: |
          echo "📝 Generating changelog..."
          
          # Get the previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          
          if [[ -n "$PREVIOUS_TAG" ]]; then
            echo "📊 Changes since $PREVIOUS_TAG:"
            CHANGELOG=$(git log --pretty=format:"- %s (%an)" ${PREVIOUS_TAG}..HEAD)
          else
            echo "📊 Initial release"
            CHANGELOG="🎉 Initial release of ShopSphere microservices platform"
          fi
          
          # Format changelog for GitHub
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  # ======================================
  # 🐳 BUILD DOCKER IMAGES (Local Registry)
  # ======================================
  build-release-images:
    runs-on: ubuntu-latest
    needs: generate-version
    strategy:
      matrix:
        service: [backend, frontend, analytics, notifications]
        include:
          - service: backend
            dockerfile: ./backend/Dockerfile
            context: ./backend
          - service: frontend
            dockerfile: ./frontend/Dockerfile
            context: ./frontend
          - service: analytics
            dockerfile: ./microservices/analytics-service/Dockerfile
            context: ./microservices/analytics-service
          - service: notifications
            dockerfile: ./microservices/notification-service/Dockerfile
            context: ./microservices/notification-service
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 📝 Extract Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
          tags: |
            type=semver,pattern={{version}},value=v${{ needs.generate-version.outputs.version }}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🐳 Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ======================================
  # 📦 CREATE GITHUB RELEASE
  # ======================================
  create-release:
    runs-on: ubuntu-latest
    needs: [generate-version, build-release-images]
    outputs:
      release-url: ${{ steps.release.outputs.html_url }}
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Create Release
        id: release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.generate-version.outputs.version }}
          release_name: ShopSphere v${{ needs.generate-version.outputs.version }}
          draft: false
          prerelease: ${{ needs.generate-version.outputs.is-prerelease }}
          body: |
            # 🚀 ShopSphere v${{ needs.generate-version.outputs.version }}
            
            ## 📊 What's New
            ${{ needs.generate-version.outputs.changelog }}
            
            ## 🐳 Docker Images
            All services are available as Docker images:
            
            - **Backend**: `ghcr.io/${{ github.repository }}/backend:v${{ needs.generate-version.outputs.version }}`
            - **Frontend**: `ghcr.io/${{ github.repository }}/frontend:v${{ needs.generate-version.outputs.version }}`
            - **Analytics**: `ghcr.io/${{ github.repository }}/analytics:v${{ needs.generate-version.outputs.version }}`
            - **Notifications**: `ghcr.io/${{ github.repository }}/notifications:v${{ needs.generate-version.outputs.version }}`
            
            ## 🚀 Quick Start (Local Development)
            ```bash
            # Clone the repository
            git clone https://github.com/${{ github.repository }}.git
            cd shopsphere
            
            # Checkout this release
            git checkout v${{ needs.generate-version.outputs.version }}
            
            # Start all services locally
            docker-compose up -d
            ```
            
            ## 🌐 Local URLs
            - **Frontend**: http://localhost:3000
            - **Backend API**: http://localhost:8001
            - **Analytics**: http://localhost:8002
            - **Notifications**: http://localhost:8003
            - **Kafka UI**: http://localhost:8080
            - **Grafana**: http://localhost:3001 (admin/admin)
            
            ## 📋 System Requirements
            - Docker 20.10+
            - Docker Compose v2+
            - 4GB RAM minimum
            - 10GB disk space
            
            ## 🔗 Useful Commands
            ```bash
            # Check service health
            make health
            
            # View logs
            docker-compose logs -f [service]
            
            # Stop all services
            docker-compose down
            
            # Clean restart
            make clean && make up
            ```
            
            ---
            **Full Changelog**: https://github.com/${{ github.repository }}/commits/v${{ needs.generate-version.outputs.version }}

  # ======================================
  # 🏠 LOCAL DEPLOYMENT READY
  # ======================================
  prepare-local-deployment:
    runs-on: ubuntu-latest
    needs: [generate-version, create-release]
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📝 Create Local Deployment Package
        run: |
          echo "📦 Creating local deployment package..."
          
          VERSION="v${{ needs.generate-version.outputs.version }}"
          
          # Create deployment directory
          mkdir -p releases/$VERSION
          
          # Create local docker-compose for this release
          cat > releases/$VERSION/docker-compose.local.yml << EOF
          # ShopSphere $VERSION - Local Deployment
          # ====================================
          version: '3.8'
          
          services:
            postgres:
              image: postgres:14-alpine
              container_name: shopsphere_postgres_$VERSION
              environment:
                POSTGRES_USER: user
                POSTGRES_PASSWORD: password
                POSTGRES_DB: shopdb
              ports:
                - "5432:5432"
              volumes:
                - postgres_data_$VERSION:/var/lib/postgresql/data
              healthcheck:
                test: ["CMD-SHELL", "pg_isready -U user -d shopdb"]
                interval: 10s
                timeout: 5s
                retries: 5
          
            redis:
              image: redis:7-alpine
              container_name: shopsphere_redis_$VERSION
              ports:
                - "6379:6379"
              volumes:
                - redis_data_$VERSION:/data
              healthcheck:
                test: ["CMD", "redis-cli", "ping"]
                interval: 10s
                timeout: 3s
                retries: 5
          
            kafka:
              image: confluentinc/cp-kafka:7.4.0
              container_name: shopsphere_kafka_$VERSION
              depends_on:
                - zookeeper
              ports:
                - "9092:9092"
              environment:
                KAFKA_BROKER_ID: 1
                KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
                KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
                KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
                KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
                KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
          
            zookeeper:
              image: confluentinc/cp-zookeeper:7.4.0
              container_name: shopsphere_zookeeper_$VERSION
              environment:
                ZOOKEEPER_CLIENT_PORT: 2181
                ZOOKEEPER_TICK_TIME: 2000
              ports:
                - "2181:2181"
          
            backend:
              image: ghcr.io/${{ github.repository }}/backend:$VERSION
              container_name: shopsphere_backend_$VERSION
              environment:
                - DATABASE_URL=postgresql://user:password@postgres:5432/shopdb
                - REDIS_URL=redis://redis:6379
                - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
              ports:
                - "8001:8001"
              depends_on:
                - postgres
                - redis
                - kafka
          
            frontend:
              image: ghcr.io/${{ github.repository }}/frontend:$VERSION
              container_name: shopsphere_frontend_$VERSION
              environment:
                - NEXT_PUBLIC_API_URL=http://localhost:8001
              ports:
                - "3000:3000"
              depends_on:
                - backend
          
            analytics:
              image: ghcr.io/${{ github.repository }}/analytics:$VERSION
              container_name: shopsphere_analytics_$VERSION
              environment:
                - REDIS_URL=redis://redis:6379
                - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
              ports:
                - "8002:8002"
              depends_on:
                - redis
                - kafka
          
            notifications:
              image: ghcr.io/${{ github.repository }}/notifications:$VERSION
              container_name: shopsphere_notifications_$VERSION
              environment:
                - REDIS_URL=redis://redis:6379
                - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
              ports:
                - "8003:8003"
              depends_on:
                - redis
                - kafka
          
          volumes:
            postgres_data_$VERSION:
            redis_data_$VERSION:
          EOF
          
          # Create local deployment script
          cat > releases/$VERSION/deploy-local.sh << 'EOF'
          #!/bin/bash
          echo "🚀 Deploying ShopSphere $VERSION locally..."
          
          # Pull latest images
          docker-compose -f docker-compose.local.yml pull
          
          # Start services
          docker-compose -f docker-compose.local.yml up -d
          
          echo "⏳ Waiting for services to start..."
          sleep 30
          
          # Health check
          echo "🏥 Performing health checks..."
          if curl -f http://localhost:8001/health > /dev/null 2>&1; then
              echo "✅ Backend is healthy"
          else
              echo "❌ Backend health check failed"
          fi
          
          if curl -f http://localhost:3000 > /dev/null 2>&1; then
              echo "✅ Frontend is healthy"
          else
              echo "❌ Frontend health check failed"
          fi
          
          echo ""
          echo "🎉 ShopSphere $VERSION deployed successfully!"
          echo ""
          echo "🌐 Access your application:"
          echo "Frontend: http://localhost:3000"
          echo "Backend API: http://localhost:8001"
          echo "Analytics: http://localhost:8002"
          echo "Notifications: http://localhost:8003"
          echo ""
          echo "🛑 To stop: docker-compose -f docker-compose.local.yml down"
          EOF
          
          chmod +x releases/$VERSION/deploy-local.sh
          
          echo "✅ Local deployment package created at releases/$VERSION/"

      - name: 📤 Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: releases/v${{ needs.generate-version.outputs.version }}/docker-compose.local.yml
          asset_name: docker-compose.local.yml
          asset_content_type: text/yaml

      - name: 📤 Upload Deployment Script
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: releases/v${{ needs.generate-version.outputs.version }}/deploy-local.sh
          asset_name: deploy-local.sh
          asset_content_type: application/x-sh

  # ======================================
  # 📢 RELEASE NOTIFICATIONS
  # ======================================
  notify-release:
    runs-on: ubuntu-latest
    needs: [generate-version, create-release, prepare-local-deployment]
    if: always() && needs.create-release.result == 'success'
    
    steps:
      - name: 📢 Slack Release Notification
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: |
            🎉 **ShopSphere v${{ needs.generate-version.outputs.version }} Released!**
            
            📦 **Release**: ${{ needs.create-release.outputs.release-url }}
            🏠 **Local Deployment**: Ready for local testing
            📊 **Type**: ${{ needs.generate-version.outputs.is-prerelease == 'true' && 'Pre-release' || 'Stable Release' }}
            
            **🚀 Quick Local Setup:**
            ```bash
            wget https://github.com/${{ github.repository }}/releases/download/v${{ needs.generate-version.outputs.version }}/deploy-local.sh
            chmod +x deploy-local.sh
            ./deploy-local.sh
            ```
            
            **🌐 Local URLs:**
            • Frontend: http://localhost:3000
            • Backend: http://localhost:8001
            • Analytics: http://localhost:8002
            • Notifications: http://localhost:8003
            
            **📋 What's New:**
            ${{ needs.generate-version.outputs.changelog }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}